[{"/home/tentacle/WebstormProjects/ChessOnline/client/src/index.js":"1","/home/tentacle/WebstormProjects/ChessOnline/client/src/App.js":"2","/home/tentacle/WebstormProjects/ChessOnline/client/src/Components/Join.js":"3","/home/tentacle/WebstormProjects/ChessOnline/client/src/Components/Room.js":"4","/home/tentacle/WebstormProjects/ChessOnline/client/src/Components/Board.js":"5"},{"size":317,"mtime":1611257894284,"results":"6","hashOfConfig":"7"},{"size":411,"mtime":1611042454713,"results":"8","hashOfConfig":"7"},{"size":541,"mtime":1611250716224,"results":"9","hashOfConfig":"7"},{"size":2907,"mtime":1611263328233,"results":"10","hashOfConfig":"7"},{"size":333,"mtime":1611250569316,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1o63lz",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/home/tentacle/WebstormProjects/ChessOnline/client/src/index.js",[],["25","26"],"/home/tentacle/WebstormProjects/ChessOnline/client/src/App.js",[],"/home/tentacle/WebstormProjects/ChessOnline/client/src/Components/Join.js",[],"/home/tentacle/WebstormProjects/ChessOnline/client/src/Components/Room.js",["27","28","29","30"],"import React, {useState} from 'react'\nimport {useParams, Link} from 'react-router-dom'\nimport socketClient from 'socket.io-client'\nimport Board from \"./Board\";\n\nconst socket = socketClient.io('https://chesstenacles.herokuapp.com/', {transports: ['websocket']})\n\nconst Room = () => {\n    const black = \"black\"\n    const white = \"white\"\n    const {room} = useParams()\n    const [game_fen, setGameFen] = useState(null);\n    const [game_id, setGameId] = useState(0)\n    const [game_status, setGameStatus] = useState('ok')\n    const [orientation, setOrientation] = useState(white)\n    const [lastMove, setLastMove] = useState('')\n    const [gameTurn, setGameTurn] = useState(white)\n    const [gameOver, setGameOver] = useState(false)\n    const checkForPieceColor = (piece) => {\n        return piece.startsWith('w') && orientation === white && piece || piece.startsWith('b') && orientation === black && piece\n    }\n    const move = (sourceSquare, targetSquare) => {\n        socket.emit('move', {move: {from: sourceSquare, to: targetSquare, promotion: 'q'}, idx: game_id, room}, ({fen}) => {\n            setGameFen(fen)\n        })\n    }\n    const onDropMove = ({ sourceSquare, targetSquare, piece }) => {\n        if(sourceSquare === targetSquare) return\n        if(checkForPieceColor(piece)){\n            move(sourceSquare, targetSquare)\n        }\n    }\n    socket.on('orientation', ({orientation}) => {\n        setOrientation(orientation)\n    })\n    socket.on('game', ({fen, id, status, last_move, turn}) => {\n        setGameFen(fen)\n        setGameId(id);\n        setLastMove(last_move)\n        setGameStatus(status)\n        setGameTurn(turn)\n        if(game_status !== 'ok' && !game_status.startsWith('check')){\n            setGameOver(true)\n        }\n    })\n    socket.on('surrender', ({status}) => {\n        setGameStatus(status)\n        setGameOver(true)\n    })\n    socket.emit('join', {room}, ({fen, id}) => {\n        setGameFen(fen)\n        setGameId(id);\n    })\n    return(\n        <div className=\"game\">\n            {game_fen ? game_status.startsWith(\"check\") ? <h1 className=\"info\">Check {game_status.split(\" \")[1] === \"w\" ? white : black}</h1> : <h1 className=\"info\">{gameTurn} turn</h1> : null}\n            {game_fen && !gameOver ? <Board orientation={orientation} fen={game_fen} onDrop={onDropMove}/>\n            : !gameOver ? <h1>Your room name is <span style={{textDecoration: 'underline'}}>{room}</span></h1> : null}\n            { gameOver ? <h1>Game over {game_status} wins</h1> : null}\n            {gameOver ? <Link style={{textAlign: 'center'}} to=\"/\">Go to home page</Link> : null}\n            { game_fen && !gameOver ? <button onClick={() => socket.emit('surrender', {room, orientation})}>Surrender</button> : null}\n            {game_fen && !gameOver && lastMove ? <h1>Last Move: {lastMove}</h1> : <h1 style={{visibility: \"hidden\"}}>Last Move</h1>}\n        </div>\n    )\n}\n\nexport default Room","/home/tentacle/WebstormProjects/ChessOnline/client/src/Components/Board.js",[],["31","32"],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":20,"column":63,"nodeType":"39","messageId":"40","endLine":20,"endColumn":65},{"ruleId":"37","severity":1,"message":"38","line":20,"column":72,"nodeType":"39","messageId":"40","endLine":20,"endColumn":74},{"ruleId":"37","severity":1,"message":"41","line":20,"column":72,"nodeType":"39","messageId":"40","endLine":20,"endColumn":74},{"ruleId":"37","severity":1,"message":"41","line":20,"column":122,"nodeType":"39","messageId":"40","endLine":20,"endColumn":124},{"ruleId":"33","replacedBy":"42"},{"ruleId":"35","replacedBy":"43"},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.",["44"],["45"],"no-global-assign","no-unsafe-negation"]